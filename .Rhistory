color = "red", linetype = "dashed", size = 0.75
) +
ggplot2::facet_wrap(~ variable, ncol = 5) +
ggplot2::theme_bw() +
ggplot2::theme(
text = ggplot2::element_text(size = 10)
)
# Compute descriptive stats to check for normality
norm_stats <- df_z %>%
dplyr::summarise(dplyr::across(
dplyr::everything(),
list(
skewness = ~ round(moments::skewness(., na.rm = TRUE), 3),
kurtosis = ~ round(moments::kurtosis(., na.rm = TRUE), 3)
)
)) %>%
tidyr::pivot_longer(
dplyr::everything(), names_to = c("variable", ".value"), names_sep = "_"
)
norm_stats$kurtosis_excess <-  norm_stats$kurtosis - 3
norm_stats$avg_skew_kurt <- rowMeans(
abs(norm_stats[, c("skewness", "kurtosis_excess")])
)
# Cretae fun for scatter plots
p_scatter <- function(x, y) {
ggplot2::ggplot(df, ggplot2::aes(x = {{x}}, y = {{y}})) +
ggplot2::geom_jitter(width = 0.5, size = 2, alpha = 0.5) +
ggplot2::geom_smooth(method = "lm", color = "red") +
ggplot2::theme_bw() +
ggplot2::labs(caption = "Jitter added at width 0.5. Tendency line base on linear regresion method (lm)")
}
# Two assumed normally distributed
p_norm2 <- p_scatter(v3, v4)
# One assumed normally distributed
p_norm1 <- p_scatter(v4, v16)
# None assumed normally distributed
p_norm0 <- p_scatter(v16, v47)
# Correlation Structure
mtx_cor <- cor(df, use = "complete.obs")
diag(mtx_cor) <- NA
max_r <- max(df_cor, na.rm = TRUE)
max_r_vars <- which(df_cor == max_r, arr.ind = TRUE)
max_r2 <- summary(lm(v18 ~ v17, data = df))$r.squared
min_r <- min(df_cor, na.rm = TRUE)
max_r <- max(mtx_cor, na.rm = TRUE)
max_r_vars <- which(mtx_cor == max_r, arr.ind = TRUE)
max_r2 <- summary(lm(v18 ~ v17, data = df))$r.squared
min_r <- min(mtx_cor, na.rm = TRUE)
min_r_vars <- which(mtx_cor == min_r, arr.ind = TRUE)
min_r2 <- summary(lm(v45 ~ v7, data = df))$r.squared
p_cor <- corrplot.mixed(mtx_cor, lower = 'number', upper = 'square',
tl.cex = 0.75, number.cex = 0.5, number.digits = 1)
rmarkdown::render("R/report_script.rmd")
rmarkdown::render("R/report_script.rmd")
rmarkdown::render("R/report_script.rmd")
library(dplyr)
library(tidyr)
library(ggplot2)
library(moments)
library(corrplot)
# Report libraries
library(knitr)
library(kableExtra)
library(rmarkdown)
## Load data
df <- foreign::read.spss(
"data/data1.sav", use.value.labels = FALSE, to.data.frame = TRUE
)
# Z-tranform
df_z <- sapply(
df, function(x) (x - mean(x, na.rm = TRUE)) / sd(x, na.rm = TRUE)
) %>% as.data.frame()
# Check histogram
df_z_long <- df_z %>%
tidyr::pivot_longer(dplyr::everything(), names_to = "variable")
p_hist <- ggplot2::ggplot(df_z_long, ggplot2::aes(value)) +
ggplot2::geom_histogram(bins = 7) +
ggplot2::geom_vline(
ggplot2::aes(xintercept = mean(value, na.rm = TRUE)),
color = "red", linetype = "dashed", size = 0.75
) +
ggplot2::facet_wrap(~ variable, ncol = 5) +
ggplot2::theme_bw() +
ggplot2::theme(
text = ggplot2::element_text(size = 10)
)
# Compute descriptive stats to check for normality
norm_stats <- df_z %>%
dplyr::summarise(dplyr::across(
dplyr::everything(),
list(
skewness = ~ round(moments::skewness(., na.rm = TRUE), 3),
kurtosis = ~ round(moments::kurtosis(., na.rm = TRUE), 3)
)
)) %>%
tidyr::pivot_longer(
dplyr::everything(), names_to = c("variable", ".value"), names_sep = "_"
)
norm_stats$kurtosis_excess <-  norm_stats$kurtosis - 3
norm_stats$avg_skew_kurt <- rowMeans(
abs(norm_stats[, c("skewness", "kurtosis_excess")])
)
# Cretae fun for scatter plots
p_scatter <- function(x, y) {
ggplot2::ggplot(df, ggplot2::aes(x = {{x}}, y = {{y}})) +
ggplot2::geom_jitter(width = 0.5, size = 2, alpha = 0.5) +
ggplot2::geom_smooth(method = "lm", color = "red") +
ggplot2::theme_bw() +
ggplot2::labs(caption = "Jitter added at width 0.5. Tendency line base on linear regresion method (lm)")
}
# Two assumed normally distributed
p_norm2 <- p_scatter(v3, v4)
# One assumed normally distributed
p_norm1 <- p_scatter(v4, v16)
# None assumed normally distributed
p_norm0 <- p_scatter(v16, v47)
# Correlation Structure
mtx_cor <- cor(df, use = "complete.obs")
diag(mtx_cor) <- NA
max_r <- max(mtx_cor, na.rm = TRUE)
max_r_vars <- which(mtx_cor == max_r, arr.ind = TRUE)
max_r2 <- summary(lm(v18 ~ v17, data = df))$r.squared
min_r <- min(mtx_cor, na.rm = TRUE)
min_r_vars <- which(mtx_cor == min_r, arr.ind = TRUE)
min_r2 <- summary(lm(v45 ~ v7, data = df))$r.squared
p_cor <- corrplot.mixed(mtx_cor, lower = 'number', upper = 'square',
tl.cex = 0.75, number.cex = 0.5, number.digits = 1)
rmarkdown::render("R/report_script.rmd")
rmarkdown::render("R/report_script.rmd")
tinytex::check_installed()
tinytex::check_installed(pkgs = "tinytex")
tinytex::install_tinytex()
rmarkdown::render("R/report_script.rmd")
library(dplyr)
library(tidyr)
library(ggplot2)
library(moments)
library(corrplot)
# Report libraries
library(knitr)
library(kableExtra)
library(rmarkdown)
## Load data
df <- foreign::read.spss(
"data/data1.sav", use.value.labels = FALSE, to.data.frame = TRUE
)
# Z-tranform
df_z <- sapply(
df, function(x) (x - mean(x, na.rm = TRUE)) / sd(x, na.rm = TRUE)
) %>% as.data.frame()
# Check histogram
df_z_long <- df_z %>%
tidyr::pivot_longer(dplyr::everything(), names_to = "variable")
p_hist <- ggplot2::ggplot(df_z_long, ggplot2::aes(value)) +
ggplot2::geom_histogram(bins = 7) +
ggplot2::geom_vline(
ggplot2::aes(xintercept = mean(value, na.rm = TRUE)),
color = "red", linetype = "dashed", size = 0.75
) +
ggplot2::facet_wrap(~ variable, ncol = 5) +
ggplot2::theme_bw() +
ggplot2::theme(
text = ggplot2::element_text(size = 10)
)
# Compute descriptive stats to check for normality
norm_stats <- df_z %>%
dplyr::summarise(dplyr::across(
dplyr::everything(),
list(
skewness = ~ round(moments::skewness(., na.rm = TRUE), 3),
kurtosis = ~ round(moments::kurtosis(., na.rm = TRUE), 3)
)
)) %>%
tidyr::pivot_longer(
dplyr::everything(), names_to = c("variable", ".value"), names_sep = "_"
)
norm_stats$kurtosis_excess <-  norm_stats$kurtosis - 3
norm_stats$avg_skew_kurt <- rowMeans(
abs(norm_stats[, c("skewness", "kurtosis_excess")])
)
# Cretae fun for scatter plots
p_scatter <- function(x, y) {
ggplot2::ggplot(df, ggplot2::aes(x = {{x}}, y = {{y}})) +
ggplot2::geom_jitter(width = 0.5, size = 2, alpha = 0.5) +
ggplot2::geom_smooth(method = "lm", color = "red") +
ggplot2::theme_bw() +
ggplot2::labs(caption = "Jitter added at width 0.5. Tendency line base on linear regresion method (lm)")
}
# Two assumed normally distributed
p_norm2 <- p_scatter(v3, v4)
# One assumed normally distributed
p_norm1 <- p_scatter(v4, v16)
# None assumed normally distributed
p_norm0 <- p_scatter(v16, v47)
# Correlation Structure
mtx_cor <- cor(df, use = "complete.obs")
diag(mtx_cor) <- NA
# Maximum correlation
max_r <- max(mtx_cor, na.rm = TRUE)
max_r_vars <- which(mtx_cor == max_r, arr.ind = TRUE)
max_r2 <- summary(lm(v18 ~ v17, data = df))$r.squared
# Mminumum correlation
min_r <- min(mtx_cor, na.rm = TRUE)
min_r_vars <- which(mtx_cor == min_r, arr.ind = TRUE)
min_r2 <- summary(lm(v45 ~ v7, data = df))$r.squared
p_cor <- corrplot.mixed(mtx_cor, lower = 'number', upper = 'square',
tl.cex = 0.75, number.cex = 0.5, number.digits = 1)
rmarkdown::render("R/report_script.rmd")
mtx_cor %>% mean
mean(mtx_cor, na.rm = TRUE)
sd(mtx_cor, na.rm = TRUE)
mtx_cor
sd(round(mtx_cor, 1), na.rm = TRUE)
mtx_cor %>% round(., 1)
lower.tri(mtx_cor, diag = FALSE)
mtx_cor[lower.tri(mtx_cor, diag = FALSE)]
mtx_cor[lower.tri(mtx_cor, diag = FALSE)] %>% class
(m2 <- matrix(1:20, 4, 5))
lower.tri(m2)
m2[lower.tri(m2)] <- NA
m2
mtx_cor[lower.tri(mtx_cor, diag = FALSE)] <- NA
mtx_cor
mtx_cor[upper.tri(mtx_cor, diag = FALSE)] <- NA
mtx_cor
# Correlation Structure
mtx_cor <- cor(df, use = "complete.obs")
mtx_cor[upper.tri(mtx_cor, diag = FALSE)] <- NA
mtx_cor
corrplot.mixed(mtx_cor, lower = 'number', upper = 'square',
tl.cex = 0.75, number.cex = 0.5, number.digits = 1)
corrplot.mixed(cor(df, use = "complete.obs"), lower = 'number', upper = 'square',
tl.cex = 0.75, number.cex = 0.5, number.digits = 1)
max(mtx_cor, na.rm = TRUE)
upper <- upper.tri(mtx_cor, diag = FALSE)
upper
upper <- upper.tri(mtx_cor, diag = TRUE)
upper
mtx_cor[upper.tri(mtx_cor, diag = TRUE)] <- NA
mtx_cor
# Maximum correlation
max_r <- max(mtx_cor, na.rm = TRUE)
max_r
max_r_vars <- which(mtx_cor == max_r, arr.ind = TRUE)
max_r2 <- summary(lm(v18 ~ v17, data = df))$r.squared
max_r2
mean(mtx_cor)
mean(mtx_cor, na.rm = TRUE)
sd(mtx_cor, na.rm = TRUE)
mtx_cor
max_r_vars
# Correlation Structure
mtx_cor <- cor(df, use = "complete.obs")
mtx_cor[upper.tri(mtx_cor, diag = TRUE)] <- NA
# Maximum correlation
max_r <- max(mtx_cor, na.rm = TRUE)
max_r_vars <- which(mtx_cor == max_r, arr.ind = TRUE)
max_r2 <- summary(lm(v18 ~ v17, data = df))$r.squared
max_r_vars
rownames(mtx_cor)[16]
rownames(mtx_cor)[15]
max_r_vars[1]
max_r_vars[2]
paste(
rownames(mtx_cor)[max_r_vars[1]],
rownames(mtx_cor)[max_r_vars[2]],
collapse = ", "
)
paste(
rownames(mtx_cor)[max_r_vars[1]],
rownames(mtx_cor)[max_r_vars[2]],
collapse = ","
)
paste(
rownames(mtx_cor)[max_r_vars[1]],
rownames(mtx_cor)[max_r_vars[2]],
collapse = "caca"
)
paste(
rownames(mtx_cor)[max_r_vars[1]], ", ",
rownames(mtx_cor)[max_r_vars[2]]
)
paste(
rownames(mtx_cor)[max_r_vars[1]], ",",
rownames(mtx_cor)[max_r_vars[2]]
)
paste0(
rownames(mtx_cor)[max_r_vars[1]], ", ",
rownames(mtx_cor)[max_r_vars[2]]
)
rmarkdown::render("R/report_script.rmd")
rmarkdown::render("R/report_script.rmd")
tinytex::check_installed(pkgs = "tinytex")
tinytex::install_tinytex()
rmarkdown::render("R/report_script.rmd")
library(dplyr)
library(tidyr)
library(ggplot2)
library(moments)
library(corrplot)
# Report libraries
library(knitr)
library(kableExtra)
library(rmarkdown)
## Load data
df <- foreign::read.spss(
"data/data1.sav", use.value.labels = FALSE, to.data.frame = TRUE
)
# Z-tranform
df_z <- sapply(
df, function(x) (x - mean(x, na.rm = TRUE)) / sd(x, na.rm = TRUE)
) %>% as.data.frame()
# Check histogram
df_z_long <- df_z %>%
tidyr::pivot_longer(dplyr::everything(), names_to = "variable")
p_hist <- ggplot2::ggplot(df_z_long, ggplot2::aes(value)) +
ggplot2::geom_histogram(bins = 7) +
ggplot2::geom_vline(
ggplot2::aes(xintercept = mean(value, na.rm = TRUE)),
color = "red", linetype = "dashed", size = 0.75
) +
ggplot2::facet_wrap(~ variable, ncol = 5) +
ggplot2::theme_bw() +
ggplot2::theme(
text = ggplot2::element_text(size = 10)
)
# Compute descriptive stats to check for normality
norm_stats <- df_z %>%
dplyr::summarise(dplyr::across(
dplyr::everything(),
list(
skewness = ~ round(moments::skewness(., na.rm = TRUE), 3),
kurtosis = ~ round(moments::kurtosis(., na.rm = TRUE), 3)
)
)) %>%
tidyr::pivot_longer(
dplyr::everything(), names_to = c("variable", ".value"), names_sep = "_"
)
norm_stats$kurtosis_excess <-  norm_stats$kurtosis - 3
norm_stats$avg_skew_kurt <- rowMeans(
abs(norm_stats[, c("skewness", "kurtosis_excess")])
)
# Cretae fun for scatter plots
p_scatter <- function(x, y) {
ggplot2::ggplot(df, ggplot2::aes(x = {{x}}, y = {{y}})) +
ggplot2::geom_jitter(width = 0.5, size = 2, alpha = 0.5) +
ggplot2::geom_smooth(method = "lm", color = "red") +
ggplot2::theme_bw() +
ggplot2::labs(caption = "Jitter added at width 0.5. Tendency line base on linear regresion method (lm)")
}
# Two assumed normally distributed
p_norm2 <- p_scatter(v3, v4)
# One assumed normally distributed
p_norm1 <- p_scatter(v4, v16)
# None assumed normally distributed
p_norm0 <- p_scatter(v16, v47)
# Correlation Structure
mtx_cor <- cor(df, use = "complete.obs")
mtx_cor[upper.tri(mtx_cor, diag = TRUE)] <- NA
# Maximum correlation
max_r <- max(mtx_cor, na.rm = TRUE)
max_r_vars <- which(mtx_cor == max_r, arr.ind = TRUE)
max_r_vars <- paste0(
rownames(mtx_cor)[max_r_vars[1]], ", ",
rownames(mtx_cor)[max_r_vars[2]]
)
max_r2 <- summary(lm(v18 ~ v17, data = df))$r.squared
# Mminumum correlation
min_r <- min(mtx_cor, na.rm = TRUE)
min_r_vars <- which(mtx_cor == min_r, arr.ind = TRUE)
min_r_vars <- paste0(
rownames(mtx_cor)[min_r_vars[1]], ", ",
rownames(mtx_cor)[min_r_vars[2]]
)
min_r2 <- summary(lm(v45 ~ v7, data = df))$r.squared
corrplot.mixed(
cor(df, use = "complete.obs"),
lower = 'number', upper = 'square',
tl.cex = 0.75, number.cex = 0.5, number.digits = 1
)
rmarkdown::render("R/report_script.rmd")
rmarkdown::render("R/report_script.rmd")
rmarkdown::render("R/report_script.rmd")
df_f <- foreign::read.spss(
"data/data1factors.sav", use.value.labels = FALSE, to.data.frame = TRUE
)
install.packages("lavaan")
df_f
str(df_f)
attributes(df_f)
attributes(df_f)$variable_labels
attributes(df_f)[[variable_labels]]
attributes(df_f)[["variable_labels"]]
attributes(df_f)
attributes(df_f) %>% class
attributes(df_f) %>% names
attributes(df_f)$variable.labels
model <- 'ta_val7 ~ kj_enc1 + op_rew3 + tk_inv5 + ts_cla6'
fit <- lavaan::sem(model, data = df_f)
fit
summary(fit)
lavaan::summary(fit)
names(fit)
fit
summary(fit) %>% names
summary(fit)$Class
summary(fit)[["Class"]]
summary(fit)
lavaan::summary(fit) %>% names
lavaan::summary(fit)$header
lavaan::summary(fit)$optim
lavaan::summary(fit)$test
lavaan::summary(fit)$pe
?sem
lavaan::summary(fit)
lavaan::summary(fit, standardize = TRUE)
?lavaan
fit <- lavaan::lavaan(model, data = df_f)
model <- 'ta_val7 ~ kj_enc1 + op_rew3 + tk_inv5 + ts_cla6'
fit <- lavaan::lavaan(model, data = df_f)
fit <- lavaan::sem(model, data = df_f)
lavaan::summary(fit, standardized = TRUE, fit.measures = TRUE)
lavaan::summary(fit, standardized = FALSE, fit.measures = TRUE)
install.packages(tidySEM)
install.packages("tidySEM")
install.packages("lavaanPlot")
install.packages("semPlot")
tidySEM::estimate_lavaan(model)
tidySEM::estimate_lavaan(model)
model <- 'ta_val7 ~ kj_enc1 + op_rew3 + tk_inv5 + ts_cla6'
tidySEM::estimate_lavaan(model)
tidySEM::estimate_lavaan(fit)
tidySEM::tidy_sem(df_f)
tidySEM::tidy_sem(df_f)$dictionary
tidySEM::tidy_sem(df_f)$syntax
tidySEM::tidy_sem(df_f)$data
tidySEM::graph_sem(model = fit)
tidySEM::prepare_graph(model = fit)
tidySEM::graph_sem(model = fit)
library(tidySEM)
tidySEM::graph_sem(model = fit)
lavanPlot::lavaanPlot(model = fit)
lavaanPlot::lavaanPlot(model = fit)
lavaanPlot::lavaanPlot(model = fit, coefs = TRUE)
tidySEM::graph_sem(model = fit)
lavaanPlot::lavaanPlot(model = fit, coefs = TRUE)
lavaanPlot::lavaanPlot(model = fit, coefs = TRUE)
semPlot::semPaths(model = fit)
semPlot::semPaths(fit)
semPlot::semPaths(fit, what = "path")
semPlot::semPlotModel_Amos(fit, what = "path", )
semPlot::semPlotModel_Amos(fit)
semPlot::semPaths(fit, what = "std")
tidySEM::graph_sem(model = fit)
lavaanPlot::lavaanPlot(model = fit, coefs = TRUE)
semPlot::semPaths(fit, what = "std")
semPlot::semPlotModel_Amos(fit)
semPlot::semPaths(fit, what = "std", residuals = TRUE)
semPlot::semPaths(fit, what = "std", residuals = FASE)
semPlot::semPaths(fit, what = "std", residuals = FALSE)
lavaan::summary(fit, standardized = TRUE, rsquare = TRUE)
inspect(fit, "rsquare")
lavaan::inspect(fit, "rsquare")
# get squared multiple correlations
r_squared = inspect(fit, "rsquare")
# extract R^2 for IV
nLatentVariables = 4
x_var = r_squared[1:(length(r_squared) - nLatentVariables)]
# get squared multiple correlations
r_squared = lavaan::inspect(fit, "rsquare")
# extract R^2 for IV
nLatentVariables = 4
x_var = r_squared[1:(length(r_squared) - nLatentVariables)]
length(r_squared)
nLatentVariables
semPlot::semPaths(fit, what = "std", residuals = TRUE)
semPlot::semPaths(fit, what = "std", residuals = TRUE,style = "lisrel")
semPlot::semPaths(fit, what = "std", residuals = TRUE, style = "ram")
semPlot::semPaths(fit, what = "std", residuals = TRUE, style = "mx")
semPlot::semPaths(fit, what = "std", residuals = TRUE, style = "mx")
semPlot::semPaths(fit, what = "std", residuals = TRUE, style = "OpenMx")
semPlot::semPaths(fit, what = "std", residuals = TRUE, style = "lisrel")
semPlot::semPaths(fit, what = "std", residuals = TRUE, style = "lisrel")
semPlot::semPaths(fit, what = "std", residuals = TRUE, intercepts = TRUE, style = "lisrel")
semPlot::semPaths(fit, what = "std", residuals = FALSE, intercepts = TRUE, style = "lisrel")
semPlot::semPaths(fit, what = "std", residuals = FALSE, intercepts = TRUE, style = "lisrel")
semPlot::semPaths(fit, what = "std", residuals = FALSE, intercepts = FALSE, style = "lisrel")
semPlot::semPaths(fit, what = "std", residuals = TRUE, intercepts = FALSE, style = "lisrel")
semPlot::semPaths(
fit, what = "std",
residuals = TRUE, intercepts = FALSE,
style = "ram"
)
semPlot::semPaths(
fit, what = "std",
residuals = TRUE, intercepts = TRUE,
style = "ram"
)
lavaan::parameterestimates(fit)
lavaan::summary(fit)$pe
parameterestimates(fit, boot.ci.type = "bca.simple", standardized = TRUE)
lavaan::parameterestimates(fit, boot.ci.type = "bca.simple", standardized = TRUE)
lavaan::parameterestimates(fit, standardized = TRUE)
# summary measures
lavaan::summary(fit, standardized = FALSE, rsquare = TRUE) # lavaan Rsquare = Square Multiple Correlation (https://paolotoffanin.wordpress.com/2018/06/30/beginning-with-sem-in-lavaan-iii/)
lavaan::summary(fit)$pe # paremeters estimates
lavaan::parameterestimates(fit, standardized = TRUE)
lavaan::parameterestimates(fit, standardized = TRUE)
# summary measures
lavaan::summary(fit, standardized = FALSE, rsquare = TRUE) # lavaan Rsquare = Square Multiple Correlation (https://paolotoffanin.wordpress.com/2018/06/30/beginning-with-sem-in-lavaan-iii/)
lavaan::parameterestimates(fit, standardized = TRUE)
rmarkdown::render("R/report_script.rmd")
